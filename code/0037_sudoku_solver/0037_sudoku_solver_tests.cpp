#include "0037_sudoku_solver_recursive.hpp"
#include "gtest/gtest.h"

TEST(t0037_sudoku_solver, test_1)
{
    std::vector<std::vector<char>> board{
        {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
         {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
         {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
         {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
         {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
         {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
         {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
         {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
         {'.', '.', '.', '.', '8', '.', '.', '7', '9'}},
    };
    std::vector<std::vector<char>> expected{
        {{'5', '3', '4', '6', '7', '8', '9', '1', '2'},
         {'6', '7', '2', '1', '9', '5', '3', '4', '8'},
         {'1', '9', '8', '3', '4', '2', '5', '6', '7'},
         {'8', '5', '9', '7', '6', '1', '4', '2', '3'},
         {'4', '2', '6', '8', '5', '3', '7', '9', '1'},
         {'7', '1', '3', '9', '2', '4', '8', '5', '6'},
         {'9', '6', '1', '5', '3', '7', '2', '8', '4'},
         {'2', '8', '7', '4', '1', '9', '6', '3', '5'},
         {'3', '4', '5', '2', '8', '6', '1', '7', '9'}},
    };

    Solution{}.solveSudoku(board);
    ASSERT_EQ(board, expected);
}

TEST(t0037_sudoku_solver, test_2)
{
    std::vector<std::vector<char>> board{
        {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
         {'.', '.', '.', '.', '.', '.', '.', '.', '6'},
         {'.', '.', '.', '.', '.', '1', '.', '9', '.'},
         {'.', '.', '.', '.', '7', '.', '1', '.', '2'},
         {'.', '.', '5', '.', '.', '3', '.', '.', '.'},
         {'.', '.', '8', '.', '4', '.', '.', '.', '7'},
         {'.', '.', '.', '8', '.', '9', '.', '5', '.'},
         {'.', '7', '.', '.', '.', '.', '.', '4', '.'},
         {'.', '2', '.', '.', '.', '.', '.', '.', '.'}},
    };
    std::vector<std::vector<char>> expected{
        {{'9', '8', '7', '6', '5', '4', '3', '2', '1'},
         {'4', '5', '1', '3', '9', '2', '8', '7', '6'},
         {'6', '3', '2', '7', '8', '1', '4', '9', '5'},
         {'3', '9', '4', '5', '7', '8', '1', '6', '2'},
         {'7', '6', '5', '2', '1', '3', '9', '8', '4'},
         {'2', '1', '8', '9', '4', '6', '5', '3', '7'},
         {'1', '4', '6', '8', '2', '9', '7', '5', '3'},
         {'8', '7', '3', '1', '6', '5', '2', '4', '9'},
         {'5', '2', '9', '4', '3', '7', '6', '1', '8'}},
    };

    Solution{}.solveSudoku(board);
    ASSERT_EQ(board, expected);
}
